- var own_page = (self.runtime.user_hid === self.user_hid)
- self.add_raw_data('profile_tab', own_page)

#content.user-mediapage(class=self.media.exists ? '' : 'deleted')
  != self.partial('@common.blocks.breadcrumbs')


  //-header.page-head.albums-head
    p.page-head__descr.hidden-xs(itemprop='description')

  .user-media
    if self.media.type === 'image'
      - var imageUrl = self.link_to('core.gridfs', { 'bucket': self.media.file_id })
        img.img-responsive(src=imageUrl)
    else if self.media.type === 'medialink'
      .user-media__video
        != self.media.medialink_html
    else if self.media.type === 'binary'
      .user-media__binary
        a(href=self.link_to('core.gridfs', { bucket: self.media.file_id }))=self.media.file_name

  if own_page
    a.user-mediapage__delete(
      href='#'
      data-media-id=self.media._id
      data-on-click='users.media:delete'
    )=self.t('delete')


  p= self.media.description
  p= self.date(self.media.ts, 'date')

  .row
    .col-md-8.col-md-offset-2

      textarea
      a Отправить

      ul.user-media__comments
        each comment in self.comments
          - commentUser=self.users[comment.user_id]
            li
              div=comment.text
              div
                a= commentUser.name
                span= self.date(comment.ts, 'date')
                a Edit
                a Delte
                a Complain

  if own_page
    .restore-notice.off
      a.restore-notice__inner(
        href='#'
        data-media-id=self.media._id
        data-on-click='users.media:restore'
      )=self.t('restore')
